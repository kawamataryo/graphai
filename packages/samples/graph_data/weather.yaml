version: 0.5
loop:
  while: :continue
nodes:
  continue:
    value: true
    update: :checkInput.continue
  messages:
    value:
      - role: system
        content: You are a meteorologist. Use getWeather API, only when the user ask for
          the weather information.
    update: :reducer
    isResult: true
  userInput:
    agent: textInputAgent
    params:
      message: "Location:"
  checkInput:
    agent: propertyFilterAgent
    params:
      inspect:
        - propId: continue
          notEqual: /bye
    inputs:
      array:
        - {}
        - :userInput
  userMessage:
    agent: propertyFilterAgent
    params:
      inject:
        - propId: content
          from: 1
    inputs:
      array:
        - role: user
        - :userInput
  messagesWithUserInput:
    agent: pushAgent
    inputs:
      array: :messages
      item: :userMessage
    if: :checkInput.continue
  llmCall:
    agent: openAIAgent
    params:
      tools:
        - type: function
          function:
            name: getWeather
            description: get wether information of the specified location
            parameters:
              type: object
              properties:
                latitude:
                  type: number
                  description: The latitude of the location.
                longitude:
                  type: number
                  description: The longitude of the location.
              required:
                - latitude
                - longitude
    inputs:
      array: :messagesWithUserInput
  output:
    agent: stringTemplateAgent
    params:
      template: "Weather: ${content}"
    console:
      after: true
    inputs:
      content: :llmCall.choices.$0.message.content
    if: :llmCall.choices.$0.message.content
  messagesWithFirstRes:
    agent: pushAgent
    inputs:
      array: :messagesWithUserInput
      item: :llmCall.choices.$0.message
  tool_calls:
    agent: nestedAgent
    inputs:
      tool_calls: :llmCall.choices.$0.message.tool_calls
      messagesWithFirstRes: :messagesWithFirstRes
    if: :llmCall.choices.$0.message.tool_calls
    graph:
      nodes:
        outputFetching:
          agent: stringTemplateAgent
          params:
            template: "... fetching weather info: ${message}"
          console:
            after: true
          inputs:
            message: :tool_calls.$0.function.arguments
        parser:
          agent: jsonParserAgent
          inputs:
            text: :tool_calls.$0.function.arguments
        urlPoints:
          agent: stringTemplateAgent
          params:
            template: https://api.weather.gov/points/${lat},${lng}
          inputs:
            lat: :parser.latitude
            lng: :parser.longitude
        fetchPoints:
          agent: fetchAgent
          inputs:
            url: :urlPoints
            headers:
              User-Agent: (receptron.org)
        fetchForecast:
          agent: fetchAgent
          params:
            type: text
          inputs:
            url: :fetchPoints.properties.forecast
            headers:
              User-Agent: (receptron.org)
          unless: :fetchPoints.onError
        extractError:
          agent: stringTemplateAgent
          params:
            template: "${title}: ${detail}"
          inputs:
            title: :fetchPoints.onError.error.title
            detail: :fetchPoints.onError.error.detail
          if: :fetchPoints.onError
        responseText:
          agent: copyAgent
          anyInput: true
          inputs:
            - :fetchForecast
            - :extractError
        toolMessage:
          agent: propertyFilterAgent
          params:
            inject:
              - propId: tool_call_id
                from: 1
              - propId: name
                from: 2
              - propId: content
                from: 3
          inputs:
            - role: tool
            - :tool_calls.$0.id
            - :tool_calls.$0.function.name
            - :responseText
        messagesWithToolRes:
          agent: pushAgent
          inputs:
            array: :messagesWithFirstRes
            item: :toolMessage
        llmCall:
          agent: openAIAgent
          inputs:
            messages: :messagesWithToolRes
        output:
          agent: stringTemplateAgent
          params:
            template: "Weather: ${0}"
          console:
            after: true
          inputs:
            - :llmCall.choices.$0.message.content
        messagesWithSecondRes:
          agent: pushAgent
          inputs:
            array: :messagesWithToolRes
            item: :llmCall.choices.$0.message
          isResult: true
  no_tool_calls:
    agent: copyAgent
    unless: :llmCall.choices.$0.message.tool_calls
    inputs:
      - :messagesWithFirstRes
  reducer:
    agent: copyAgent
    anyInput: true
    inputs:
      - :no_tool_calls
      - :tool_calls.messagesWithSecondRes
